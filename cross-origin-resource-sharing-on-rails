<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <title>About by davelyon</title>

    <link rel="stylesheet" href="stylesheets/styles.css">
    <link rel="stylesheet" href="stylesheets/pygment_trac.css">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>
  <body>
    <div class="wrapper">
      <header>
        <h1>Cross Origin Resource Sharing on Rails</h1>


        <p class="view"><a href="https://github.com/davelyon">View My GitHub Profile</a></p>

      </header>
      <section>
        <h1>Cross Origin Resource Sharing on Rails</h1>

<p>While working on creating a bookmarklet for my new link sharing site, I ran in to a new solution to a common cross site scripting issue that allows POST requests to be sent from different originating sites.</p>

<p>Cross-Origin Resource Sharing (CORS) is a new mechanism for allowing sites to allow cross site scripting access with certain restrictions.  A draft specification is available here: <a href="http://www.w3.org/TR/cors/">http://www.w3.org/TR/cors/</a>.  Essentially, CORS is a conversation you can choose to have with supporting browsers (IE8 and 9, Safari, and Chrome at this time) that will notify the browser that it should either allow or deny a specific request to a different originating server.</p>

<p>There are two ways this is handled: </p>

<li>Simple Requests - Must be a GET or POST request, and must send a Content-Type to the server of application/x-www-form-urlencoded, multipart/form-data, or text/plain.  Must also NOT set any custom headers in the request. No verification needed other than an 'Access-Control-Allow-Origin' header with either '*' or the domain the request was sent from as the value
</li>

<li>Complex Requests - Any other request will send an HTTP 'OPTIONS' request first in order to 'pre-flight' check the request the browser would really like to send.  A good example of how this request looks is available here: <a href="https://developer.mozilla.org/en/HTTP_access_control">https://developer.mozilla.org/en/HTTP_access_control</a> 
</li>

<p>So what does it take to get this working in Rails 3? Surprisingly, not all that much!  The quick and dirty solution is as follows:</p>

<script src="https://gist.github.com/davelyon/986681.js"></script>

<p>However, I would very much like to add broader support for the spec I linked to above, and plan on turning this in to some sort of plugin soon.</p>
      </section>
      <footer>
        <p><small>Hosted on GitHub Pages &mdash; Theme by <a href="https://github.com/orderedlist">orderedlist</a></small></p>
      </footer>
    </div>
    <script src="javascripts/scale.fix.js"></script>
    
  </body>
</html>
